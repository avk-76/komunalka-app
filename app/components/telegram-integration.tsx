

'use client';

import { useState } from 'react';
import { Send, Settings, CheckCircle, AlertCircle } from 'lucide-react';
import { CalculationResult } from '@/lib/types';

interface TelegramIntegrationProps {
  results: CalculationResult[];
}

export default function TelegramIntegration({ results }: TelegramIntegrationProps) {
  const [botToken, setBotToken] = useState('');
  const [chatId, setChatId] = useState('');
  const [isConfigured, setIsConfigured] = useState(false);
  const [isSending, setIsSending] = useState(false);
  const [sentResults, setSentResults] = useState<string[]>([]);

  // –°–∏–º—É–ª—è—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –±–æ—Ç–∞
  const checkBotConfiguration = () => {
    // –í —Ä–µ–∞–ª—å–Ω—ñ–π —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç—É—Ç –±—É–¥–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑ Telegram API
    setIsConfigured(botToken.trim() !== '' && chatId.trim() !== '');
  };

  // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram
  const formatTelegramMessage = (result: CalculationResult): string => {
    const period = new Date(result.period + '-01').toLocaleDateString('uk-UA', { 
      year: 'numeric', 
      month: 'long' 
    });

    let message = `üè† *${result.apartmentName}*\n`;
    message += `üìÖ –ü–µ—Ä—ñ–æ–¥: ${period}\n`;
    message += `üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: *${result.totalAmount.toFixed(2)} –≥—Ä–Ω*\n\n`;
    
    message += `üìã *–î–µ—Ç–∞–ª—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É:*\n`;
    result.services.forEach(service => {
      message += `‚Ä¢ ${service.name}: ${service.amount.toFixed(2)} –≥—Ä–Ω`;
      if (service.consumption) {
        message += ` (${service.consumption.toFixed(2)} ${service.unit})`;
      }
      message += '\n';
    });

    message += `\nüìä –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ: ${new Date(result.calculationDate).toLocaleDateString('uk-UA')}`;
    message += `\n\n‚ùì –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è (+) –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ (-)`;

    return message;
  };

  // –°–∏–º—É–ª—è—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–æ Telegram
  const sendToTelegram = async (result: CalculationResult) => {
    setIsSending(true);
    
    // –°–∏–º—É–ª—è—Ü—ñ—è API –∑–∞–ø–∏—Ç—É
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –í —Ä–µ–∞–ª—å–Ω—ñ–π —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç—É—Ç –±—É–¥–µ:
    // const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
    //   method: 'POST',
    //   headers: { 'Content-Type': 'application/json' },
    //   body: JSON.stringify({
    //     chat_id: chatId,
    //     text: formatTelegramMessage(result),
    //     parse_mode: 'Markdown'
    //   })
    // });

    setSentResults(prev => [...prev, result.apartmentId]);
    setIsSending(false);
  };

  // –°–∏–º—É–ª—è—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
  const simulateConfirmation = (apartmentId: string) => {
    // –í —Ä–µ–∞–ª—å–Ω—ñ–π —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç—É—Ç –±—É–¥–µ webhook endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    alert(`–°–∏–º—É–ª—è—Ü—ñ—è: –æ—Ç—Ä–∏–º–∞–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è "+" –¥–ª—è ${apartmentId}`);
  };

  return (
    <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-6">
      <div className="flex items-center space-x-3 mb-6">
        <Send className="h-6 w-6 text-blue-600" />
        <h2 className="text-xl font-semibold text-gray-800">Telegram —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è</h2>
        {isConfigured && (
          <CheckCircle className="h-5 w-5 text-green-500" />
        )}
      </div>

      {/* Configuration */}
      {!isConfigured && (
        <div className="space-y-4 mb-6 p-4 bg-yellow-50 rounded-lg border border-yellow-200">
          <div className="flex items-start space-x-2">
            <AlertCircle className="h-5 w-5 text-yellow-600 mt-0.5" />
            <div>
              <h3 className="font-medium text-yellow-800">–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram –±–æ—Ç–∞</h3>
              <p className="text-sm text-yellow-700 mt-1">
                –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ Telegram –±–æ—Ç–∞
              </p>
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Bot Token (–∑ @BotFather)
              </label>
              <input
                type="password"
                value={botToken}
                onChange={(e) => setBotToken(e.target.value)}
                placeholder="123456789:ABCdef..."
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Chat ID
              </label>
              <input
                type="text"
                value={chatId}
                onChange={(e) => setChatId(e.target.value)}
                placeholder="@username –∞–±–æ —á–∏—Å–ª–æ–≤–∏–π ID"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>
          
          <button
            onClick={checkBotConfiguration}
            className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <Settings className="h-4 w-4" />
            <span>–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</span>
          </button>
        </div>
      )}

      {/* Results to Send */}
      {isConfigured && results.length > 0 && (
        <div className="space-y-4">
          <h3 className="text-lg font-semibold text-gray-800">–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏</h3>
          
          <div className="space-y-3">
            {results.map(result => {
              const isSent = sentResults.includes(result.apartmentId);
              
              return (
                <div key={result.apartmentId} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                  <div>
                    <div className="font-medium text-gray-800">{result.apartmentName}</div>
                    <div className="text-sm text-gray-500">
                      {result.totalAmount.toFixed(2)} –≥—Ä–Ω ‚Ä¢ {' '}
                      {new Date(result.period + '-01').toLocaleDateString('uk-UA', { 
                        year: 'numeric', 
                        month: 'long' 
                      })}
                    </div>
                    {isSent && (
                      <div className="text-sm text-green-600 mt-1">‚úì –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ—á—ñ–∫—É—î—Ç—å—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è</div>
                    )}
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    {!isSent ? (
                      <button
                        onClick={() => sendToTelegram(result)}
                        disabled={isSending}
                        className="flex items-center space-x-2 px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50"
                      >
                        <Send className="h-4 w-4" />
                        <span>{isSending ? '–í—ñ–¥–ø—Ä–∞–≤–ª—è—é...' : '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏'}</span>
                      </button>
                    ) : (
                      <button
                        onClick={() => simulateConfirmation(result.apartmentId)}
                        className="flex items-center space-x-2 px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                      >
                        <CheckCircle className="h-4 w-4" />
                        <span>–°–∏–º—É–ª—è—Ü—ñ—è +</span>
                      </button>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}

      {/* Instructions */}
      <div className="mt-6 p-4 bg-blue-50 rounded-lg">
        <h4 className="font-medium text-blue-800 mb-2">–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ—ó —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó:</h4>
        <ol className="text-sm text-blue-700 space-y-1 list-decimal list-inside">
          <li>–°—Ç–≤–æ—Ä—ñ—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram</li>
          <li>–û—Ç—Ä–∏–º–∞–π—Ç–µ Bot Token —Ç–∞ –∑–±–µ—Ä–µ–∂—ñ—Ç—å –π–æ–≥–æ</li>
          <li>–°—Ç–≤–æ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –∞–±–æ –≥—Ä—É–ø—É –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏</li>
          <li>–î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ –¥–æ –∫–∞–Ω–∞–ª—É –∑ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</li>
          <li>–ù–∞–ª–∞—à—Ç—É–π—Ç–µ webhook endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—å</li>
          <li>–°—Ç–≤–æ—Ä—ñ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–Ω—Ç—ñ–≤ –∑ —ó—Ö Chat ID</li>
        </ol>
      </div>

      {!isConfigured && results.length === 0 && (
        <div className="text-center py-8 text-gray-500">
          <Send className="h-12 w-12 mx-auto mb-3 text-gray-300" />
          <p>–ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏</p>
          <p className="text-sm">–°–ø–æ—á–∞—Ç–∫—É —Ä–æ–∑—Ä–∞—Ö—É–π—Ç–µ –ø–ª–∞—Ç–µ–∂—ñ –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä</p>
        </div>
      )}
    </div>
  );
}
